                {
                    //IceBoltDebuff
                    var modifier = new Modifier("IceBoltTest");
                    var damageData = new[] { new DamageData(15, DamageType.Magical, new ElementData(ElementalType.Cold, 20, 10)) };
                    var target = new TargetComponent();
                    var effect = new DamageComponent(damageData, target);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(effect));
                    modifier.AddComponent(new TimeComponent(new RemoveComponent(modifier)));
                    modifier.FinishSetup(damageData);
                    _modifierPrototypes.AddModifier(modifier);
                    _modifierPrototypes.SetupModifierApplier(modifier);
                }
                {
                    var modifier = new Modifier("SpiderPoisonTest");
                    var target = new TargetComponent();
                    var damageData = new[] { new DamageData(5, DamageType.Physical, new ElementData(ElementalType.Poison, 10, 20)) };
                    var effect = new DamageComponent(damageData, target);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(effect));
                    modifier.AddComponent(new TimeComponent(effect, 2, true));
                    modifier.AddComponent(new TimeComponent(new RemoveComponent(modifier), 10));
                    modifier.FinishSetup(damageData);
                    _modifierPrototypes.AddModifier(modifier);
                    _modifierPrototypes.SetupModifierApplier(modifier);
                }
                {
                    //PassiveSelfHeal
                    var modifier = new Modifier("PassiveSelfHealTest");
                    var target = new TargetComponent();
                    var effect = new HealComponent(10, target);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(effect));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                    //Forever buff (applier), not refreshable or stackable (for now)
                    //SetupModifierApplier(selfHealModifier, LegalTarget.Self);
                }
                {
                    var modifier = new Modifier("AllyHealTest");
                    var target = new TargetComponent();
                    var effect = new HealComponent(10, target);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(effect));
                    modifier.AddComponent(new TimeComponent(new RemoveComponent(modifier)));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                    //Forever buff (applier), not refreshable or stackable (for now)
                    _modifierPrototypes.SetupModifierApplier(modifier, LegalTarget.DefaultFriendly);
                }
                {
                    //BasicPoison, removed after 10 seconds
                    var modifier = new Modifier("PoisonTest");
                    var target = new TargetComponent();
                    var damageData = new[] { new DamageData(2, DamageType.Physical, new ElementData(ElementalType.Poison, 20, 20)) };
                    var effect = new DamageComponent(damageData, target);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(effect));
                    modifier.AddComponent(new TimeComponent(effect, 2, true));
                    modifier.AddComponent(new TimeComponent(new RemoveComponent(modifier), 10));
                    modifier.FinishSetup(damageData);
                    _modifierPrototypes.AddModifier(modifier);
                    _modifierPrototypes.SetupModifierApplier(modifier);
                }
                {
                    //BasicBleed, removed after 10 seconds
                    var modifier = new Modifier("BleedTest");
                    var target = new TargetComponent();
                    var damageData = new[] { new DamageData(2, DamageType.Physical, new ElementData(ElementalType.Bleed, 20, 20)) };
                    var effect = new DamageComponent(damageData, target);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(effect));
                    modifier.AddComponent(new TimeComponent(effect, 2, true));
                    modifier.AddComponent(new TimeComponent(new RemoveComponent(modifier), 10));
                    modifier.FinishSetup(damageData);
                    _modifierPrototypes.AddModifier(modifier);
                    _modifierPrototypes.SetupModifierApplier(modifier);
                }
                {
                    //MovementSpeedOfCat, removed after 10 seconds
                    var modifier = new Modifier("MovementSpeedOfCatTest");
                    var target = new TargetComponent(LegalTarget.Self);
                    var effect = new StatComponent(new[] { new Stat(StatType.MovementSpeed, 5) }, target);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(effect));
                    modifier.AddComponent(new TimeComponent(new RemoveComponent(modifier), 10));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                }
                {
                    //AttackSpeedOfCatTest, removed after 10 seconds
                    var modifier = new Modifier("AttackSpeedOfCatTest");
                    var target = new TargetComponent(LegalTarget.Self);
                    var effect = new StatComponent(new[] { new Stat(StatType.AttackSpeed, 5) }, target);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(effect));
                    modifier.AddComponent(new TimeComponent(new RemoveComponent(modifier), 10));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                }
                {
                    //Disarm modifier
                    var modifier = new Modifier("DisarmModifierTest");
                    var target = new TargetComponent(LegalTarget.Self);
                    var effect = new StatusComponent(StatusEffect.Disarm, 2f, target);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(effect));
                    modifier.AddComponent(new TimeComponent(new RemoveComponent(modifier)));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                    _modifierPrototypes.SetupModifierApplier(modifier);
                }
                {
                    //Cast modifier
                    var modifier = new Modifier("SilenceModifierTest");
                    var target = new TargetComponent(LegalTarget.Self);
                    var effect = new StatusComponent(StatusEffect.Silence, 2f, target);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(effect));
                    modifier.AddComponent(new TimeComponent(new RemoveComponent(modifier)));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                    _modifierPrototypes.SetupModifierApplier(modifier);
                }
                {
                    //Root timed modifier (enigma Q)
                    var modifier = new Modifier("RootTimedModifierTest");
                    var target = new TargetComponent(LegalTarget.Self);
                    var effect = new StatusComponent(StatusEffect.Root, 0.1f, target);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(effect));
                    modifier.AddComponent(new TimeComponent(effect, 1, true));
                    modifier.AddComponent(new TimeComponent(new RemoveComponent(modifier), 10));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                    _modifierPrototypes.SetupModifierApplier(modifier);
                }
                {
                    //Delayed silence modifier
                    var modifier = new Modifier("DelayedSilenceModifierTest");
                    var target = new TargetComponent(LegalTarget.Self);
                    var effect = new StatusComponent(StatusEffect.Silence, 1, target);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new TimeComponent(effect, 1));
                    modifier.AddComponent(new TimeComponent(new RemoveComponent(modifier), 2));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                    _modifierPrototypes.SetupModifierApplier(modifier);
                }
                {
                    //All possible tags modifiers
                    var modifier = new Modifier("ManyTagsTest");
                    var target = new TargetComponent();
                    var damageData = new[]
                    {
                        new DamageData(1, DamageType.Magical, new ElementData(ElementalType.Acid, 10, 20)),
                        new DamageData(1, DamageType.Pure, new ElementData(ElementalType.Bleed, 10, 20)),
                        new DamageData(1, DamageType.Physical, new ElementData(ElementalType.Cold, 10, 20)),
                    };
                    var effect = new DamageComponent(damageData, target);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(effect));
                    modifier.AddComponent(new TimeComponent(effect, 2, true));
                    modifier.AddComponent(new TimeComponent(new RemoveComponent(modifier), 10));
                    modifier.FinishSetup(damageData);
                    _modifierPrototypes.AddModifier(modifier);
                    _modifierPrototypes.SetupModifierApplier(modifier);
                }
                {
                    //Damage on kill
                    var modifier = new Modifier("DamageOnKillTest");
                    var conditionData = new ConditionEventData(ConditionEventTarget.SelfActer, ConditionEvent.KillEvent);
                    var target = new TargetComponent(LegalTarget.Beings, conditionData);
                    var effect = new DamageStatComponent(new[] { new DamageData(2, DamageType.Physical) }, target);
                    var apply = new ConditionalApplyComponent(effect, target, conditionData);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(apply));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                }
                {
                    //Plain add damage permanently
                    var modifier = new Modifier("AddStatDamageTest");
                    var target = new TargetComponent(LegalTarget.Self);
                    var effect = new DamageStatComponent(new[] { new DamageData(2, DamageType.Physical) }, target);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(effect));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                }
                {
                    //Damage on death
                    var modifier = new Modifier("DamageOnDeathTest");
                    var conditionData = new ConditionEventData(ConditionEventTarget.ActerSelf, ConditionEvent.OnDeathEvent);
                    var target = new TargetComponent(LegalTarget.Beings, conditionData);
                    var effect = new DamageComponent(new []{new DamageData(double.MaxValue, DamageType.Magical)}, target);
                    var apply = new ConditionalApplyComponent(effect, target, conditionData);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(apply));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                }
                {
                    //Timed damage on kill
                    var modifier = new Modifier("TimedDamageOnKillTest");
                    var conditionData = new ConditionEventData(ConditionEventTarget.SelfActer, ConditionEvent.KillEvent);
                    var target = new TargetComponent(LegalTarget.Beings, conditionData);
                    var effect = new DamageStatComponent(new[] { new DamageData(2, DamageType.Physical) }, target);
                    var apply = new ConditionalApplyComponent(effect, target, conditionData);
                    var cleanUp = new CleanUpComponent(apply);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(apply));
                    modifier.AddComponent(new TimeComponent(new RemoveComponent(modifier, cleanUp), 5));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                }
                {
                    //Thorns on hit
                    var modifier = new Modifier("ThornsOnHitTest");
                    var conditionData = new ConditionEventData(ConditionEventTarget.ActerSelf, ConditionEvent.OnHitEvent);
                    var target = new TargetComponent(LegalTarget.Beings, conditionData);
                    var effect = new DamageComponent(new []{new DamageData(5, DamageType.Physical)}, target);
                    var apply = new ConditionalApplyComponent(effect, target, conditionData);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(apply));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                }
                {
                    //TODO We might come into trouble with multiple target components, since rn we rely on having only one in modifier
                    //Heal on death, once
                    var modifier = new Modifier("HealOnDeathTest");
                    var conditionData = new ConditionEventData(ConditionEventTarget.SelfActer, ConditionEvent.OnDeathEvent);
                    var target = new TargetComponent(LegalTarget.Beings, conditionData);
                    var effect = new HealComponent(10, target);
                    var apply = new ConditionalApplyComponent(effect, target, conditionData);
                    var cleanUp = new CleanUpComponent(apply);
                    var removeEffect = new RemoveComponent(modifier, cleanUp);
                    var applyRemoval = new ConditionalApplyComponent(removeEffect, target, conditionData);
                    modifier.AddComponent(target);
                    modifier.AddComponent(apply);
                    modifier.AddComponent(new InitComponent(apply, applyRemoval));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                }
                {
                    //Heal stat based
                    var modifier = new Modifier("HealStatBasedTest");
                    var target = new TargetComponent(LegalTarget.Beings);
                    var effect = new HealStatBasedComponent(target);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(effect));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                }
                {
                    //Heal yourself on healing someone else
                    var modifier = new Modifier("HealOnHealTest");
                    var conditionData = new ConditionEventData(ConditionEventTarget.SelfSelf, ConditionEvent.HealEvent);
                    var target = new TargetComponent(LegalTarget.Beings, conditionData);
                    var effect = new HealStatBasedComponent(target);
                    var apply = new ConditionalApplyComponent(effect, target, conditionData);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(apply));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                }
                {
                    //Damage increased per stack dot
                    var modifier = new Modifier("DoTStackTest");
                    var damageData = new[] { new DamageData(1, DamageType.Physical, new ElementData(ElementalType.Poison, 10, 20)) };
                    var target = new TargetComponent(LegalTarget.Beings);
                    var effect = new DamageComponent(damageData, target, DamageComponent.DamageComponentStackEffect.Add);
                    var timeRemove = new TimeComponent(new RemoveComponent(modifier), 10);
                    modifier.AddComponent(target);
                    modifier.AddComponent(timeRemove);
                    modifier.AddComponent(new InitComponent(effect));
                    modifier.AddComponent(new TimeComponent(effect, 2, true));
                    modifier.AddComponent(new StackComponent(effect, new StackComponentProperties() { Value = 2 }));
                    modifier.FinishSetup(damageData);
                    _modifierPrototypes.AddModifier(modifier);
                    _modifierPrototypes.SetupModifierApplier(modifier);
                }
                {
                    //Refresh duration DoT
                    var modifier = new Modifier("DoTRefreshTest");
                    var damageData = new[] { new DamageData(1, DamageType.Physical, new ElementData(ElementalType.Poison, 10, 20)) };
                    var target = new TargetComponent(LegalTarget.Beings);
                    var effect = new DamageComponent(damageData, target);
                    var timeRemove = new TimeComponent(new RemoveComponent(modifier), 10);
                    modifier.AddComponent(target);
                    modifier.AddComponent(timeRemove);
                    modifier.AddComponent(new InitComponent(effect));
                    modifier.AddComponent(new TimeComponent(effect, 2, true));
                    modifier.AddComponent(new RefreshComponent(timeRemove, RefreshEffectType.RefreshDuration));
                    modifier.FinishSetup(damageData);
                    _modifierPrototypes.AddModifier(modifier);
                    _modifierPrototypes.SetupModifierApplier(modifier);
                }
                {
                    //Silence on 4 stacks
                    var modifier = new Modifier("SilenceXStacksTest");
                    var target = new TargetComponent(LegalTarget.Beings);
                    var effect = new StatusComponent(StatusEffect.Silence, 4, target, StatusComponent.StatusComponentStackEffect.Effect);
                    var timeRemove = new TimeComponent(new RemoveComponent(modifier), 10);
                    modifier.AddComponent(target);
                    modifier.AddComponent(timeRemove);
                    modifier.AddComponent(new InitComponent(effect));
                    modifier.AddComponent(new StackComponent(effect, new StackComponentProperties()
                        { WhenStackEffect = WhenStackEffect.EveryXStacks, OnXStacks = 4 }));
                    modifier.AddComponent(new RefreshComponent(timeRemove, RefreshEffectType.RefreshDuration));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                    _modifierPrototypes.SetupModifierApplier(modifier);
                }
                {
                    //Apply a new modifier that Stuns, on 3 stacks (effect is an example, it can be much more nuanced than that)
                    var stunModifier = new Modifier("ApplyStunModifierXStacksTest");
                    var stunTarget = new TargetComponent();
                    var stunEffect = new StatusComponent(StatusEffect.Stun, 2, stunTarget);
                    stunModifier.AddComponent(stunTarget);
                    stunModifier.AddComponent(new InitComponent(stunEffect));
                    stunModifier.AddComponent(new TimeComponent(new RemoveComponent(stunModifier)));
                    stunModifier.FinishSetup();
                    _modifierPrototypes.AddModifier(stunModifier);

                    var modifier = new Modifier("ApplyStunModifierXStacksTestApplier", true);
                    var target = new TargetComponent(LegalTarget.Self, true);
                    var effect = new ApplierEffectComponent(stunModifier, target, isStackEffect: true);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new StackComponent(effect, new StackComponentProperties()
                        { WhenStackEffect = WhenStackEffect.EveryXStacks, OnXStacks = 3 }));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                    _modifierPrototypes.SetupModifierApplier(modifier);//ApplierApplier
                }
                {
                    var modifier = new Modifier("DamageOnLowHealthTest");
                    var conditionData = new ConditionEventData(ConditionEventTarget.SelfActer, ConditionEvent.OnHitEvent);
                    var target = new TargetComponent(LegalTarget.Beings, conditionData);
                    var effect = new DamageStatComponent(new[] { new DamageData(50, DamageType.Physical) }, target,
                        new ConditionCheckData(ConditionBeingStatus.HealthIsLow));
                    var apply = new ConditionalApplyComponent(effect, target, conditionData);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(apply));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                }
                {
                    var flagModifier = new Modifier("FlagTest");
                    var flagTarget = new TargetComponent(LegalTarget.Beings);
                    var effectFlag = new DamageStatComponent(new[] { new DamageData(1, DamageType.Physical) }, flagTarget);
                    flagModifier.AddComponent(flagTarget);
                    flagModifier.AddComponent(new InitComponent(effectFlag));
                    flagModifier.FinishSetup();
                    _modifierPrototypes.AddModifier(flagModifier);

                    var modifier = new Modifier("DamageOnModifierIdTest");
                    var target = new TargetComponent(LegalTarget.Beings);
                    var effect = new DamageStatComponent(new[] { new DamageData(double.MaxValue, DamageType.Physical) }, target,
                        new ConditionCheckData("FlagTest"));
                    //var apply = new ApplyComponent(effect, target);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(effect));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                }
                {
                    //If enemy is on fire, deal damage to him, on hit
                    var modifier = new Modifier("DealDamageOnElementalIntensityTest");
                    //We check intensity on acter
                    var conditionData = new ConditionEventData(ConditionEventTarget.ActerSelf, ConditionEvent.HitEvent);
                    var target = new TargetComponent(LegalTarget.Beings, conditionData);
                    var effect = new DamageComponent(new[] { new DamageData(10000, DamageType.Physical) }, target,
                        conditionCheckData: new ConditionCheckData(ElementalType.Fire, ComparisonCheck.GreaterOrEqual,
                            Curves.ElementIntensity.Evaluate(900)));
                    var apply = new ConditionalApplyComponent(effect, target, conditionData);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(apply));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                }
                {
                    //If health on IsLow, add 50 physical damage, if not, remove 50 physical damage
                    var modifier = new Modifier("DamageOnLowHealthRemoveTest");
                    var conditionData = new ConditionEventData(ConditionEventTarget.SelfActer, ConditionEvent.OnHitEvent);
                    var target = new TargetComponent(LegalTarget.Beings, conditionData);
                    var effect = new DamageStatComponent(new[] { new DamageData(50, DamageType.Physical) }, target,
                        new ConditionCheckData(ConditionBeingStatus.HealthIsLow));
                    var apply = new ConditionalApplyComponent(effect, target, conditionData);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(apply));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                }
                {
                    //On hit, attack yourself
                    var modifier = new Modifier("AttackYourselfOnHitTest");
                    var conditionData = new ConditionEventData(ConditionEventTarget.SelfSelf, ConditionEvent.OnHitEvent);
                    var target = new TargetComponent(LegalTarget.Self, conditionData);
                    var effect = new AttackComponent(target);
                    var apply = new ConditionalApplyComponent(effect, target, conditionData);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(apply));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                }
                {
                    //On damaged, attack yourself
                    var modifier = new Modifier("AttackYourselfOnDamagedTest");
                    var conditionData = new ConditionEventData(ConditionEventTarget.SelfSelf, ConditionEvent.OnDamagedEvent);
                    var target = new TargetComponent(LegalTarget.Self, conditionData);
                    var effect = new AttackComponent(target);
                    var apply = new ConditionalApplyComponent(effect, target, conditionData);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(apply));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                }
                {
                    //Hit, heal yourself
                    var modifier = new Modifier("HealYourselfHitTest");
                    var conditionData = new ConditionEventData(ConditionEventTarget.SelfSelf, ConditionEvent.HitEvent);
                    var target = new TargetComponent(LegalTarget.Self, conditionData);
                    var effect = new HealStatBasedComponent(target);
                    var apply = new ConditionalApplyComponent(effect, target, conditionData);
                    modifier.AddComponent(target);
                    modifier.AddComponent(new InitComponent(apply));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                }

                /*{
                    //Applier onDeath (lowers health), copies itself, infinite loop possible?
                    var modifier = new Modifier("DeathHealthTestApplier", true);
                    var conditionData = new ConditionData(ConditionTarget.Acter, BeingConditionEvent.DeathEvent);
                    var target = new TargetComponent(LegalTarget.Beings, conditionData, true);
                    var effect = new StatComponent(new[] { new Stat(StatType.Health, -15) }, target);
                    var applierEffect = new ApplierComponent(modifier, target);
                    var apply = new ApplyComponent(applierEffect, target, conditionData);
                    modifier.AddComponent(target);
                    modifier.AddComponent(apply);
                    modifier.AddComponent(new InitComponent(effect));
                    modifier.FinishSetup();
                    _modifierPrototypes.AddModifier(modifier);
                    _modifierPrototypes.SetupModifierApplier(modifier);
                }*/